contract {contracts} {
    uint256 public withdrawalLimit = {numbers} ether;
    {comments}
    mapping(address => uint256) public lastWithdrawTime;
    mapping(address => uint256) public balances;
    
    {comments}
    {comments}

    {comments}
    function withdrawFunds (uint256 _weiToWithdraw) public {
        require(!lock); {comments}
        lock = true;
        require(balances[msg.sender] >= _weiToWithdraw);
        // limit the withdrawal
        require(_weiToWithdraw <= withdrawalLimit);
        // limit the time allowed to withdraw {comments}
        require(now >= lastWithdrawTime[msg.sender] + 1 weeks);
        require(msg.sender.call.value(_weiToWithdraw)()); {comments}
        balances[msg.sender] -= _weiToWithdraw;
        lastWithdrawTime[msg.sender] = now;
        lock = false;
    }
    {comments}
    {comments}
    function depositFunds() public payable {
        balances[msg.sender] += msg.value; {comments}
    }
 }
